
! APPLICATION FUNCTIONS

# Any WheatSystem application may implement the functions `init` and `kill`. These functions help the system manage the lifecycle of applications.

$ init = 1
    # Triggered by the application system immediately after an application launches. If an application does not implement `init`, the application will remain inactive after launch.
    @ ID

$ kill = 2
    # Requests for the receiving application to terminate. The application should clean up any volatile resources.
    @ ID

! TERMINAL DRIVER FUNCTIONS

# A terminal driver implements the functions `listenTerm`, `termSize`, and `wrtTerm`. The standard system terminal driver is optional for WheatSystem distributions. If available, the standard system terminal driver has the file name `wsTerm`.

$ listenTerm = 3
    # Causes the calling application to become an observer of the receiving terminal driver. When the terminal driver registers a typed key, it will invoke the `termInput` function of its observer. Each terminal driver may have at most one observer. If another application invokes `listenTerm`, it will become the new observer.
    @ ID
    * Throws `missingErr` if the calling application does not implement `termInput`.

$ termSize = 4
    # Retrieves the dimensions of the terminal controlled by the receiving terminal driver. The dimensions are measured in number of characters.
    @ ID
    > (sInt32) widthDest = Destination for the width
    > (sInt32) heightDest = Destination for the height

$ wrtTerm = 5 
    # Displays text on the terminal of the receiving terminal driver. Text will wrap around to the next line after it reaches the end of the screen.
    @ ID
    > (sInt32) x = Horizontal coordinate
    > (sInt32) y = Vertical coordinate
    > (ptr array sInt8) text = Text to write

$ termInput = 6
    # Invoked by a terminal driver to notify the receiving observer when a key has been typed.
    @ ID
    > (sInt8) key = Typed key code

    # Terminal key codes for visible characters have ASCII values. Other key codes include the following:
    * Space = 32
    * Tab = 9
    * Newline = 10
    * Backspace = 127
    * Escape = 27
    * Left = -1
    * Right = -2
    * Up = -3
    * Down = -4
    * Reverse tab = -5
    * System menu = -6

! SERIAL DRIVER FUNCTIONS

# A serial driver implements the functions `startSerial`, `stopSerial`, and `wrtSerial`. The standard system serial driver is optional for WheatSystem distributions. If available, the standard system serial driver has the file name `wsSerial`.

$ startSerial = 7
    # Causes the receiving serial driver to open the given serial port, and assigns the calling application as an observer. When the port receives input data, the serial driver will will invoke the `serialInput` function on the port's observer.
    @ ID
    > (sInt8) port = Serial port number
    > (sInt32) baudRate = Serial port baud rate

$ stopSerial = 8
    # Causes the receiving serial driver to close the given serial port. The port will no longer send or receive data.
    @ ID
    > (sInt8) port = Serial port number

$ wrtSerial = 9
    # Causes the receiving serial driver to output data over the given serial port.
    @ ID
    > (sInt8) port = Serial port number
    > (ptr) buff = Buffer to write

$ serialInput = 10
    # Invoked by a serial driver to notify the receiving observer when a serial byte has been ingested.
    @ ID
    > (sInt8) port = Serial port number
    > (sInt8) value = Received serial data

! GPIO DRIVER FUNCTIONS

# A GPIO driver implements the functions `setGpioMode`, `readGpio`, and `wrtGpio`. The standard system GPIO driver is optional for WheatSystem distributions. If available, the standard system GPIO driver has the file name `wsGpio`.

$ setGpioMode = 11
    # Sets the I/O mode of the given GPIO pin.
    @ ID
    > (sInt32) pin = GPIO pin number
    > (sInt8) mode = I/O mode

    # Available I/O modes include the following:
    * Digital read = 0
    * Analog read = 1
    * Digital write = 2
    * Analog write = 3

$ readGpio = 12
    # Reads a digital or analog value from the given GPIO pin.
    @ ID
    > (sInt32) dest = Destination for the value
    > (sInt32) pin = GPIO pin number

$ wrtGpio = 13
    # Writes a digital or analog value to the given GPIO pin.
    @ ID
    > (sInt32) pin = GPIO pin number
    > (sInt32) value = Value to write

! SHELL FUNCTIONS

# A shell implements the following functions:
* `newWindow`
* `delWindow`
* `displayWindowMessage`
* `promptWindowOption`
* `promptWindowText`
* `clrWindow`
* `windowTermSize`
* `readWindowTerm`
* `wrtWindowTerm`
# The standard system shell is optional for WheatSystem distributions. If available, the standard system shell has the file name `wsShell`.
# A function implemented by the shell will throw `permErr` if all of the conditions below are true:
* The function accepts a window handle as an input argument
* The caller is not the owner of the window handle
* The caller does not hold admin permission

$ newWindow = 14
    # Creates a new window which allows interaction with the user. All shell implementations can display text in windows, while graphics are only supported on certain platforms. The caller of `newWindow` is considered to be the owner of the window. If `title` is null, the title of the window will be the file name of the caller. If the user presses a key while the window is focused, the shell will call `windowKeyPressed` on the window owner. If the user requests to close the window, the shell will call `reqDelWindow` on the window owner.
    @ ID
    > (ptr) dest = Destination for the new window handle
    > (ptr array sInt8) title = Title for the window

$ reqDelWindow = 15
    # Invoked by the shell to notify the receiving window owner when the user has requested to close the given window. If the window owner does not implement `reqDelWindow`, the shell will delete the window immediately.
    @ ID
    > (ptr) window = Window handle

$ delWindow = 16
    # Deletes the given window.
    @ ID
    > (ptr) window = Window handle

$ displayWindowMessage = 17
    # Displays a message in the given window, and waits for the user to dismiss the message. If the message is too long to fit in the window, the user can scroll up and down to view the whole message. `dest` will be set to 1 if the user pressed the escape key, and 0 for all other keys.
    @ ID
    > (sInt8) dest = Destination for whether escape key was pressed
    > (ptr) window = Window handle
    > (ptr array sInt8) message = Message to display

$ promptWindowOption = 18
    # Displays a list of options in the given window, and waits for the user to select an option. If `message` is null, then no message will be displayed above the options. If the user presses the escape key, `dest` will be set to -1.
    @ ID
    > (sInt32) dest = Destination for index of selected option
    > (ptr) window = Window handle
    > (ptr array sInt8) message = Message to display above options
    > (ptr array ptr array sInt8) options = List of strings for the options

$ promptWindowText = 19
    # Prompts the user to enter a line of text in the given window. Newlines are not supported in the text entry. If `message` is null, then no message will be displayed above the text entry. If `startText` is null, then the initial contents of the text entry will be empty. If the user presses the escape key, `dest` will be set to null.
    @ ID
    > (ptr array sInt8) dest = Destination for the typed text
    > (ptr) window = Window handle
    > (ptr array sInt8) message = Message to display above text entry
    > (ptr array sInt8) startText = Initial contents of text entry

$ clrWindow = 20
    # Erases any text or graphics which are displayed in the given window.
    @ ID
    > (ptr) window = Window handle

$ windowTermSize = 21
    # Retrieves the width and height of the given window.
    @ ID
    > (sInt32) widthDest = Destination for the width
    > (sInt32) heightDest = Destination for the height
    > (ptr) window = Window handle

$ readWindowTerm = 22
    # Reads text which has been drawn using `wrtWindowTerm` in the given window. The character position to read will wrap around to the next line after it reaches the end of the window.
    @ ID
    > (ptr array sInt8) dest = Destination for the text
    > (ptr) window = Window handle
    > (sInt32) x = Horizontal coordinate
    > (sInt32) y = Vertical coordinate
    > (sInt32) length = Length of text to read

$ wrtWindowTerm = 23
    # Displays text in the given window. Text will wrap around to the next line after it reaches the end of the window.
    @ ID
    > (ptr) window = Window handle
    > (sInt32) x = Horizontal coordinate
    > (sInt32) y = Vertical coordinate
    > (ptr array sInt8) text = Text to write

$ windowKeyPressed = 24
    # Invoked by the shell to notify the receiving window owner when the user has pressed a key. Note that the shell will not call `windowKeyPressed` while `displayWindowMessage`, `promptWindowOption`, or `promptWindowText` are running.
    @ ID
    > (ptr) window = Window handle
    > (sInt8) key = Typed key code

$ windowFocusChanged = 25
    # Invoked by the shell to notify the receiving window owner when the window has changed focus. A focused window is visible to the user and registers key presses.
    @ ID
    > (ptr) window = Window handle
    > (sInt8) hasFocus = Whether the window has focus


