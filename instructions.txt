
! MEMORY INSTRUCTIONS

$ wrt = 0x00
    # Writes a value from one memory location to another.
    @ OPCODE
    > (sInt) dest = Destination for writing
    > (sInt) value = Value to write

$ wrtBuff = 0x01
    # Copies a sequence of bytes between memory locations. `dest` and `buff` may overlap each other in memory.
    @ OPCODE
    > (any) dest = Start of the destination buffer
    > (any) buff = Start of the source buffer
    > (sInt) size = Number of bytes in the buffer
    * Throws `lenErr` if `size` reaches outside allocation bounds.

$ newArgFrame = 0x02
    # Creates a new argument frame to feed into the next function invocation. If an argument frame already exists, it will be deleted first.
    @ OPCODE
    > (sInt) size = Size of the new argument frame

$ newAlloc = 0x03
    # Creates a new heap allocation.
    @ OPCODE
    > (ptr) dest = Destination for the new heap allocation
    > (sInt8) attrs = Attributes of the new heap allocation
    > (sInt) size = Size of the new heap allocation

$ delAlloc = 0x04
    # Deletes a heap allocation.
    @ OPCODE
    > (ptr) alloc = Heap allocation

$ allocAttrs = 0x05
    # Retrieves the attributes of a heap allocation.
    @ OPCODE
    > (sInt8) dest = Destination for the attributes
    > (ptr) alloc = Heap allocation

$ allocSize = 0x06
    # Retrieves the size of a heap allocation.
    @ OPCODE
    > (sInt) dest = Destination for the size
    > (ptr) alloc = Heap allocation

$ allocCreator = 0x07
    # Retrieves the file handle of the application which created the given heap allocation. The result is null if the allocation was created by the system.
    @ OPCODE
    > (ptr appHandle) dest = Destination for the result
    > (ptr) alloc = Heap allocation

$ setAllocAttrs = 0x08
    # Modifies the attributes of the given heap allocation.
    @ OPCODE
    > (ptr) alloc = Heap allocation
    > (sInt8) attrs = Allocation attributes

! CONTROL FLOW INSTRUCTIONS

$ jmp = 0x10
    # Jumps control flow to another instruction within the current function.
    @ OPCODE
    > (const sInt) instrOffset = File offset from start of instruction body
    * Throws `indexErr` if `instrOffset` is outside instruction body bounds.

$ jmpZ = 0x11
    # Jumps control flow to another instruction if the given value is zero.
    @ OPCODE
    > (const sInt) instrOffset = File offset from start of instruction body
    > (sInt) cond = Condition value
    * Throws `indexErr` if `instrOffset` is outside instruction body bounds.

$ jmpNZ = 0x12
    # Jumps control flow to another instruction if the given value is not zero.
    @ OPCODE
    > (const sInt) instrOffset = File offset from start of instruction body
    > (sInt) cond = Condition value
    * Throws `indexErr` if `instrOffset` is outside instruction body bounds.

! GATE INSTRUCTIONS

$ newGate = 0x20
    # Creates a new gate to facilitate synchronization of function invocations within the current application. The current application is considered to be the owner of the new gate. If an application quits, all gates owned by the application will be deleted.
    @ OPCODE
    > (ptr gate) dest = Destination for the gate sentry
    > (sInt8) mode = Mode for the new gate

$ delGate = 0x21
    # Deletes the given gate.
    @ OPCODE
    > (ptr gate) gate = Gate sentry

$ waitGate = 0x22
    # Blocks execution of the current function invocation if the given gate is closed. If another thread in the current app calls `openGate` on the gate, execution will resume. If the gate mode is 1, the gate will close after calling `waitGate`.
    @ OPCODE
    > (ptr gate) gate = Gate sentry
    * Throws `missingErr` if the gate is deleted while waiting

$ openGate = 0x23
    # Causes the given gate to open. If the gate mode is 0, then `openGate` will resume all threads blocked by `waitGate`. If the gate mode is 1, then `openGate` will resume only one thread blocked by `waitGate`, and `waitGate` will immediately close the gate again.
    @ OPCODE
    > (ptr gate) gate = Gate sentry

$ closeGate = 0x24
    # Causes the given gate to close, so that `waitGate` will block thread execution.
    @ OPCODE
    > (ptr gate) gate = Gate sentry

$ setGateMode = 0x25
    # Changes the mode of the given gate.
    @ OPCODE
    > (ptr gate) gate = Gate sentry
    > (sInt8) mode = New mode for the gate

! ERROR INSTRUCTIONS

$ setErrJmp = 0x30
    # Configures an error handler within the current function. If an error is thrown, control flow will jump to the error handler.
    @ OPCODE
    > (const sInt) instrOffset = File offset from start of instruction body

$ clrErrJmp = 0x31
    # Removes any error handler from the current function. If an error is thrown, it will be passed to the invoking function.
    @ OPCODE

$ throw = 0x32
    # Throws an error which will be handled by the invoking function. The error code must be in the range of `s8`.
    @ OPCODE
    > (sInt8) errCode = Error code
    * Throws `numRangeErr` if `code` is not in the range of `s8`.

$ err = 0x33
    # Retrieves the code of the last error which was caught in the current function. The result will be 0 if no error has been caught by an error handler.
    @ OPCODE
    > (sInt8) dest = Destination for the error code

! FUNCTION INSTRUCTIONS

$ findFunc = 0x40
    # Searches for a function with the given ID in the given application. If such a function is not found, the result is -1.
    @ OPCODE
    > (sInt) dest = Destination for the function index
    > (ptr appHandle) appHandle = Application file handle
    > (sInt) funcId = Function ID

$ call = 0x41
    # Invokes a function which is defined in the current application.
    @ OPCODE
    > (sInt) funcIndex = Index of a function in the function table

$ callRemote = 0x42
    # Invokes a function which may be defined in another application.
    @ OPCODE
    > (ptr appHandle) appHandle = Application file handle
    > (sInt) funcIndex = Index of a function in the function table

$ ret = 0x43
    # Exits the current function and returns control flow to the invoking function.
    @ OPCODE

$ caller = 0x44
    # Retrieves the file handle of the application which invoked the current function.
    @ OPCODE
    > (ptr appHandle) dest = Destination for the application file handle

$ funcIsGuarded = 0x45
    # Retrieves whether the function defined in the given application is guarded.
    @ OPCODE
    > (sInt8) dest = Destination for the result
    > (ptr appHandle) appHandle = Application file handle
    > (sInt) funcIndex = Index of a function in the function table

! BITWISE INSTRUCTIONS

$ bNot = 0x50
    # Performs bitwise NOT with the given value.
    @ OPCODE
    > (sInt) dest = Destination for the result
    > (sInt) value = Operand

$ bOr = 0x51
    # Performs bitwise OR with the given values.
    @ OPCODE
    > (sInt) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand

$ bAnd = 0x52
    # Performs bitwise AND with the given values.
    @ OPCODE
    > (sInt) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand

$ bXor = 0x53
    # Performs bitwise XOR with the given values.
    @ OPCODE
    > (sInt) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand

$ bLeft = 0x54
    # Performs bitshift left with the given values.
    @ OPCODE
    > (sInt) dest = Destination for the result
    > (sInt) value1 = Value to shift
    > (sInt8) value2 = Amount by which to shift

$ bRight = 0x55
    # Performs bitshift right with the given values.
    @ OPCODE
    > (sInt) dest = Destination for the result
    > (sInt) value1 = Value to shift
    > (sInt8) value2 = Amount by which to shift

! COMPARISON INSTRUCTIONS

$ equ = 0x60
    # Determines whether the given values are equal.
    @ OPCODE
    > (sInt8) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand

$ nEqu = 0x61
    # Determines whether the given values are not equal.
    @ OPCODE
    > (sInt8) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand

$ gre = 0x62
    # Determines whether the first value is greater than the second value.
    @ OPCODE
    > (sInt8) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand

$ nGre = 0x63
    # Determines whether the first value is not greater than the second value.
    @ OPCODE
    > (sInt8) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand

! ARITHMETIC INSTRUCTIONS

$ add = 0x70
    # Performs addition with the given values.
    @ OPCODE
    > (sInt) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand

$ sub = 0x71
    # Performs subtraction with the given values.
    @ OPCODE
    > (sInt) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand

$ mul = 0x72
    # Performs multiplication with the given values.
    @ OPCODE
    > (sInt) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand

$ div = 0x73
    # Performs division with the given values.
    @ OPCODE
    > (sInt) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand
    * Throws `numRangeErr` if `value2` is zero.

$ mod = 0x74
    # Performs the modulo operation with the given values.
    @ OPCODE
    > (sInt) dest = Destination for the result
    > (sInt) value1 = First operand
    > (sInt) value2 = Second operand
    * Throws `numRangeErr` if `value2` is zero.

! APPLICATION INSTRUCTIONS

$ launch = 0x80
    # Launches the given application if it is not already running.
    @ OPCODE
    > (ptr appHandle) appHandle = Application file handle

$ thisApp = 0x81
    # Retrieves the file handle of the current application.
    @ OPCODE
    > (ptr appHandle) dest = Destination for the application file handle

$ quitApp = 0x82
    # Terminates the current application.
    @ OPCODE

$ appIsRunning = 0x83
    # Retrieves whether the given application is running.
    @ OPCODE
    > (sInt8) dest = Destination for the result
    > (ptr appHandle) appHandle = Application file handle

$ appInitErr = 0x84
    # Retrieves the code of the unhandled error which terminated the `init` function of the given application. The result will be 0 if the given application has no associated `init` error. The `init` error will persist until `appHandle` is deleted by the system, or until the application is launched again.
    @ OPCODE
    > (sInt8) dest = Destination for the result
    > (ptr appHandle) appHandle = Application file handle

$ killApp = 0x85
    # Requests for the given application to terminate.
    @ OPCODE
    > (ptr appHandle) appHandle = Application file handle
    * Throws `permErr` if the invoking application does not hold admin permission.

! FILE INSTRUCTIONS

$ newFile = 0x90
    # Creates a new file.
    @ OPCODE
    > (ptr array sInt8) name = Name of the new file
    > (sInt8) type = Type of the new file
    > (sInt8) isGuarded = Whether the new file should be guarded
    > (sInt) size = Size of the new file
    * Throws `dataErr` if `name` is longer than 127 characters, or if a file with name `name` already exists.

$ delFile = 0x91
    # Deletes the given file.
    @ OPCODE
    > (ptr fileHandle) fileHandle = File handle

$ openFile = 0x92
    # Retrieves a file handle for the given file. After the current application finishes using the file handle, the application should perform the `closeFile` instruction. Otherwise, the system may accumulate garbage.
    @ OPCODE
    > (ptr fileHandle) dest = Destination for the file handle
    > (ptr array sInt8) name = File name

$ closeFile = 0x93
    # Indicates to the system that the current application has finished using the given file handle. The system may delete `fileHandle` if all other applications have also closed the file handle.
    @ OPCODE
    > (ptr fileHandle) fileHandle = File handle

$ readFile = 0x94
    # Reads a sequences of bytes from the given file into a buffer.
    @ OPCODE
    > (any) dest = Destination for file data
    > (ptr fileHandle) fileHandle = File handle
    > (sInt) pos = File position
    > (sInt) size = Number of bytes to read
    * Throws `indexErr` if `pos` is outside file bounds.
    * Throws `lenErr` if `size` reaches outside file or allocation bounds.

$ wrtFile = 0x95
    # Writes a sequences of bytes from the given buffer into a file.
    @ OPCODE
    > (ptr fileHandle) fileHandle = File handle
    > (sInt) pos = File position
    > (any) buff = Data buffer
    > (sInt) size = Number of bytes to write
    * Throws `indexErr` if `pos` is outside file bounds.
    * Throws `lenErr` if `size` reaches outside file or allocation bounds.

! FILE METADATA INSTRUCTIONS

$ allFileNames = 0xA0
    # Retrieves a list of all file names in the system volume.
    @ OPCODE
    > (ptr array ptr array sInt8) dest = Destination for the list of file names

$ fileExists = 0xA1
    # Retrieves whether a file with the given name exists.
    @ OPCODE
    > (sInt8) dest = Destination for the result
    > (ptr array sInt8) name = File name

$ fileName = 0xA2
    # Retrieves the name of the given file.
    @ OPCODE
    > (ptr array sInt8) dest = Destination for the file name
    > (ptr fileHandle) fileHandle = File handle

$ fileType = 0xA3
    # Retrieves the type of the given file.
    @ OPCODE
    > (sInt8) dest = Destination for the file type
    > (ptr fileHandle) fileHandle = File handle

$ fileIsGuarded = 0xA4
    # Retrieves whether the given file is guarded.
    @ OPCODE
    > (sInt8) dest = Destination for the result
    > (ptr fileHandle) fileHandle = File handle

$ fileSize = 0xA5
    # Retrieves the size of the given file.
    @ OPCODE
    > (sInt) dest = Destination for the file size
    > (ptr fileHandle) fileHandle = File handle

! PERMISSION INSTRUCTIONS

$ hasAdminPerm = 0xB0
    # Retrieves whether the given application holds admin permission.
    @ OPCODE
    > (sInt8) dest = Destination for the result
    > (ptr appHandle) appHandle = Application file handle

$ giveAdminPerm = 0xB1
    # Grants admin permission to the given application.
    @ OPCODE
    > (ptr appHandle) appHandle = Application file handle

$ delAdminPerm = 0xB2
    # Deletes admin permission from the given application.
    @ OPCODE
    > (ptr appHandle) appHandle = Application file handle

! RESOURCE INSTRUCTIONS

$ memSize = 0xC0
    # Retrieves the total amount of memory in the system.
    @ OPCODE
    > (sInt) dest = Destination for the amount

$ appMemSize = 0xC1
    # Retrieves the amount of memory used by the given application.
    @ OPCODE
    > (sInt) dest = Destination for the amount
    > (ptr appHandle) appHandle = Application file handle

$ memSizeLeft = 0xC2
    # Retrieves the amount of unused memory remaining in the system.
    @ OPCODE
    > (sInt) dest = Destination for the amount

$ volSize = 0xC3
    # Retrieves the total amount of storage in the system volume.
    @ OPCODE
    > (sInt) dest = Destination for the amount

$ volSizeLeft = 0xC4
    # Retrieves the amount of unused storage remaining in the system volume.
    @ OPCODE
    > (sInt) dest = Destination for the amount


